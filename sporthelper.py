import datetime
import random
import sqlite3
import threading
import time

import numpy as np
import requests
import schedule as sched
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from telebot import TeleBot, types

TELEGRAM_TOKEN = '8050281814:AAE2kmU7ZJHQwJMCMlJaZL-te3HpHNELSvw'
bot = TeleBot(TELEGRAM_TOKEN)
DATABASE_NAME = "sports.db"
YANDEX_MAPS_API_KEY = "a48685ac-a8e0-4f0b-a36c-e44b74e14362"

user_answers = {}
user_data = {}

questions = [
    "1. –ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π)?",
    "2. –ö–∞–∫–æ–π —Ç–∏–ø —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π, –∫–æ–º–∞–Ω–¥–Ω—ã–π)?",
    "3. –ö–∞–∫—É—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ (–Ω–∏–∑–∫–∞—è, —Å—Ä–µ–¥–Ω—è—è, –≤—ã—Å–æ–∫–∞—è)?",
    "4. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Å–ø–æ—Ä—Ç—É (0-2 —á–∞—Å–∞, 2-4 —á–∞—Å–∞, 4+ —á–∞—Å–∞)?",
    "5. –ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ –≤ —Å–ø–æ—Ä—Ç–µ (—É–ª—É—á—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã, –æ–±—â–µ–Ω–∏–µ, —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ, —Å–Ω—è—Ç–∏–µ —Å—Ç—Ä–µ—Å—Å–∞)?",
    "6. –í–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ –∏–ª–∏ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏?",
    "7. –í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Å–ø–æ—Ä—Ç, —Ç—Ä–µ–±—É—é—â–∏–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∏ –ª–æ–≤–∫–æ—Å—Ç–∏, –∏–ª–∏ —Å–∏–ª–æ–≤–æ–π?",
    "8. –£ –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ —Ç—Ä–∞–≤–º—ã (–¥–∞/–Ω–µ—Ç)?",
]

activity_factors = {
    "–Ω–∏–∑–∫–∏–π": 1.2,
    "—Å—Ä–µ–¥–Ω–∏–π": 1.55,
    "–≤—ã—Å–æ–∫–∏–π": 1.9
}

reminders = [
    "–ü–æ–º–Ω–∏ –æ —Å–≤–æ–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ! –ü–æ–¥–≥–æ—Ç–æ–≤—å—Å—è –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ–µ!",
    "–ü–µ—Ä–µ—Ä—ã–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è - –æ—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! –°–¥–µ–ª–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–ª–∏ –ø—Ä–æ–≥—É–ª—è–π—Å—è!",
    "–ù–µ –∑–∞–±—É–¥—å —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å! –ó–∞–ø–∏—à–∏ –∏–¥–µ–∏ –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —Å–ø–ª–∞–Ω–∏—Ä—É–π —Å–≤–æ–π —Ä–∞—Ü–∏–æ–Ω.",
    "–í—Ä–µ–º—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å! –ü–æ–º–Ω–∏ –æ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö –∏ —Å–ø–ª–∞–Ω–∏—Ä—É–π —Å–≤–æ–π –¥–µ–Ω—å –∑–∞—Ä–∞–Ω–µ–µ!",
    "–¢–≤–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∂–¥–µ—Ç —Ç–µ–±—è! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø–æ–ø–æ—Ç–µ—Ç—å –∏ –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏!",
    "–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ —Å–≤–æ—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! –¢—ã —É–∂–µ –Ω–∞ –ø–æ–ª–ø—É—Ç–∏ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏!",
    "–¢—ã –ø–æ–º–Ω–∏—à—å, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è? –ï—â–µ –Ω–µ –ø–æ–∑–¥–Ω–æ –Ω–∞—á–∞—Ç—å!",
    "–ó–∞–ø–∏—à–∏ —Å–≤–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏! –°–ª–µ–¥–∏ –∑–∞ —Å–≤–æ–µ–π –¥–∏–µ—Ç–æ–π, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π!",
    "–ù–µ –∑–∞–±—ã–≤–∞–π –æ –≤–æ–¥–µ! –ü–µ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∂–∏–¥–∫–æ—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–≤–æ–µ —Ç–µ–ª–æ –≤ —Ñ–æ—Ä–º–µ!",
    "–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç!",
    "–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –î–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º!",
    "–¢–≤–æ–µ —Ç–µ–ª–æ —Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ —Å–ø–∞—Å–∏–±–æ!",
    "–ü–æ–º–Ω–∏ –æ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö! –û–Ω–∏ –∂–¥—É—Ç —Ç–µ–±—è!",
    "–ü–æ–º–Ω–∏, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–æ—Å—Ç–∏—á—å –≤—Å–µ–≥–æ, —á–µ–≥–æ –∑–∞—Ö–æ—á–µ—à—å! –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥!"
]


def get_surgut_districts():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT district FROM organizations")
    districts = [row[0] for row in cursor.fetchall() if row[0] is not None]
    conn.close()
    return districts


def get_coordinates(address):
    geocode_url = f"https://geocode-maps.yandex.ru/1.x/?apikey={YANDEX_MAPS_API_KEY}&geocode={address}, –°—É—Ä–≥—É—Ç&format=json"
    try:
        response = requests.get(geocode_url)
        response.raise_for_status()
        data = response.json()
        coordinates = data['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['Point']['pos']
        longitude, latitude = map(float, coordinates.split())
        return latitude, longitude
    except requests.exceptions.RequestException as e:
        print(f"Error fetching coordinates: {e}")
        return None
    except (KeyError, IndexError, ValueError) as e:
        print(f"Error parsing Yandex Maps response: {e}")
        return None


def get_sports_facilities(district=None, sport_type=None):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    query = "SELECT organization, address, phone FROM organizations"
    conditions = []
    params = []

    if district:
        conditions.append("district=?")
        params.append(district)
    if sport_type and sport_type != "–õ—é–±–æ–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞":
        conditions.append("sport_type=?")
        params.append(sport_type)

    if conditions:
        query += " WHERE " + " AND ".join(conditions)

    cursor.execute(query, params)
    facilities = cursor.fetchall()
    conn.close()
    return facilities


def format_facility_info(facility):
    name, address, phone = facility
    coordinates = get_coordinates(address)
    map_link = ""
    if coordinates:
        latitude, longitude = coordinates
        map_link = f"https://yandex.ru/maps/?ll={longitude},{latitude}&z=16&pt={longitude},{latitude}&l=map"
    response_text = f"üè¢ {name}\n"
    response_text += f"üìç –ê–¥—Ä–µ—Å: {address}\n"
    response_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone if phone else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    if map_link:
        response_text += f"üó∫Ô∏è [–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ]({map_link})\n"
    response_text += "\n"
    return response_text


def get_all_chat_ids():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id FROM user_data")
    chat_ids = [row[0] for row in cursor.fetchall()]
    conn.close()
    return chat_ids


def calculate_calories(gender, weight, height, age, activity_level, goal):
    if gender == "–º—É–∂—Å–∫–æ–π":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    calories = bmr * activity_factors.get(activity_level, 1.2)
    if goal == "–ø–æ—Ö—É–¥–µ–Ω–∏–µ":
        calories *= 0.85
    elif goal == "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã":
        calories *= 1.15
    protein = weight * 1.8
    fat = calories * 0.25 / 9
    carbs = (calories - protein * 4 - fat * 9) / 4

    return {
        "–∫–∞–ª–æ—Ä–∏–∏": int(calories),
        "–±–µ–ª–∫–∏": int(protein),
        "–∂–∏—Ä—ã": int(fat),
        "—É–≥–ª–µ–≤–æ–¥—ã": int(carbs)
    }


X = np.array([
    [2, 1, 2, 2, 0, 0, 0, 1],
    [1, 0, 1, 1, 2, 1, 1, 0],
    [1, 1, 2, 2, 1, 0, 1, 1],
    [0, 0, 0, 1, 0, 1, 0, 0],
    [1, 1, 1, 2, 2, 1, 0, 1],
    [1, 1, 2, 2, 3, 0, 1, 1],
    [1, 1, 2, 2, 3, 1, 0, 1],
    [2, 0, 2, 1, 0, 0, 1, 0],
    [0, 0, 1, 1, 1, 1, 0, 0],
    [1, 1, 1, 2, 1, 0, 0, 1]
])
y = np.array([
    "–ë–µ–≥",
    "–ü–ª–∞–≤–∞–Ω–∏–µ",
    "–í–µ–ª–æ—Å–ø–æ—Ä—Ç",
    "–ô–æ–≥–∞",
    "–¢–µ–Ω–Ω–∏—Å",
    "–§—É—Ç–±–æ–ª",
    "–ë–∞—Å–∫–µ—Ç–±–æ–ª",
    "–¢—è–∂–µ–ª–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞",
    "–ü–∏–ª–∞—Ç–µ—Å",
    "–í–æ–ª–µ–π–±–æ–ª"
])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestClassifier()
model.fit(X_train, y_train)


def predict_sport(feature_vector):
    return model.predict([feature_vector])[0]


def process_answers(answers):
    feature_vector = np.zeros(8)

    if answers[0] == "–ù–∏–∑–∫–∏–π":
        feature_vector[0] = 0
    elif answers[0] == "–°—Ä–µ–¥–Ω–∏–π":
        feature_vector[0] = 1
    else:
        feature_vector[0] = 2

    if answers[1] == "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π":
        feature_vector[1] = 0
    else:
        feature_vector[1] = 1

    if answers[2] == "–ù–∏–∑–∫–∞—è":
        feature_vector[2] = 0
    elif answers[2] == "–°—Ä–µ–¥–Ω—è—è":
        feature_vector[2] = 1
    else:
        feature_vector[2] = 2

    if answers[3] == "0-2 —á–∞—Å–∞":
        feature_vector[3] = 0
    elif answers[3] == "2-4 —á–∞—Å–∞":
        feature_vector[3] = 1
    else:
        feature_vector[3] = 2

    if answers[4] == "–£–ª—É—á—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã":
        feature_vector[4] = 0
    elif answers[4] == "–û–±—â–µ–Ω–∏–µ":
        feature_vector[4] = 1
    elif answers[4] == "–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ":
        feature_vector[4] = 2
    else:
        feature_vector[4] = 3

    if answers[5] == "–ù–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ":
        feature_vector[5] = 0
    else:
        feature_vector[5] = 1

    if answers[6] == "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∏ –ª–æ–≤–∫–æ—Å—Ç—å":
        feature_vector[6] = 0
    else:
        feature_vector[6] = 1

    if answers[7] == "–î–∞":
        feature_vector[7] = 1
    else:
        feature_vector[7] = 0
    return feature_vector


def set_user_state(chat_id, state, command=None):
    user_data.setdefault(chat_id, {})['state'] = state
    if command:
        user_data[chat_id]['command'] = command


def get_user_state(chat_id):
    return user_data.get(chat_id, {}).get('state')


def get_user_command(chat_id):
    return user_data.get(chat_id, {}).get('command')


def clear_user_data(chat_id):
    if chat_id in user_data:
        del user_data[chat_id]


def ask_question(chat_id, question_index):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if question_index == 0:
        markup.add("–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π")
    elif question_index == 1:
        markup.add("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π", "–ö–æ–º–∞–Ω–¥–Ω—ã–π")
    elif question_index == 2:
        markup.add("–ù–∏–∑–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–í—ã—Å–æ–∫–∞—è")
    elif question_index == 3:
        markup.add("0-2 —á–∞—Å–∞", "2-4 —á–∞—Å–∞", "4+ —á–∞—Å–∞")
    elif question_index == 4:
        markup.add("–£–ª—É—á—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã", "–û–±—â–µ–Ω–∏–µ", "–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ", "–°–Ω—è—Ç–∏–µ —Å—Ç—Ä–µ—Å—Å–∞")
    elif question_index == 5:
        markup.add("–ù–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ", "–í –ø–æ–º–µ—â–µ–Ω–∏–∏")
    elif question_index == 6:
        markup.add("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∏ –ª–æ–≤–∫–æ—Å—Ç—å", "–°–∏–ª–æ–≤–æ–π")
    elif question_index == 7:
        markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(chat_id, questions[question_index], reply_markup=markup)


def ask_goal(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã")
    bot.send_message(chat_id, "–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å –ø–æ –ø–∏—Ç–∞–Ω–∏—é?", reply_markup=markup)
    set_user_state(chat_id, 'waiting_for_goal', command='k')


def ask_activity_level(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π")
    bot.send_message(chat_id, "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?", reply_markup=markup)
    set_user_state(chat_id, 'waiting_for_activity', command='k')


def get_organizations_info(sport_type):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT organization, description, phone, address FROM organizations WHERE sport_type=?",
                   (sport_type,))
    organizations = cursor.fetchall()
    conn.close()
    return organizations


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    if chat_id in user_answers:
        del user_answers[chat_id]
    set_user_state(chat_id, None)

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='user_data';")
    table_exists = cursor.fetchone()
    if not table_exists:
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_data (
            chat_id INTEGER PRIMARY KEY,
            gender TEXT,
            age INTEGER,
            height INTEGER,
            weight REAL,
            activity_level TEXT,
            goal TEXT
        )
        """)
        conn.commit()
        print("–¢–∞–±–ª–∏—Ü–∞ user_data —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")

    cursor.execute("SELECT chat_id FROM user_data WHERE chat_id=?", (chat_id,))
    result = cursor.fetchone()
    if result is None:
        cursor.execute("INSERT INTO user_data (chat_id) VALUES (?)", (chat_id,))
        conn.commit()
        print(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {chat_id}")
    conn.close()

    bot.send_message(chat_id,
                     "–ü—Ä–∏–≤–µ—Ç!üëã –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã üèÄ –≤ –°—É—Ä–≥—É—Ç–µ üçΩÔ∏è, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ üèÄ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ üçΩÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
                     reply_markup=get_main_menu())


@bot.message_handler(func=lambda message: message.text == "–ù–∞–π—Ç–∏ —Å–ø–æ—Ä—Ç–∑–∞–ª")
def gym_command(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT sport_type FROM organizations")
    sport_types = [row[0] for row in cursor.fetchall() if row[0] is not None]
    conn.close()

    for sport in sport_types:
        markup.add(sport)

    bot.send_message(chat_id, "–ö–∞–∫–æ–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)
    bot.register_next_step_handler(message, process_sport_type)


def process_sport_type(message):
    chat_id = message.chat.id
    sport_type = message.text

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    districts = get_surgut_districts()
    for district in districts:
        markup.add(str(district))

    markup.add("–õ—é–±–æ–π —Ä–∞–π–æ–Ω")
    bot.send_message(chat_id, "–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –≤—ã –∏—â–µ—Ç–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç?", reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg, s_type=sport_type: process_district(msg, s_type))


def process_district(message, sport_type):
    chat_id = message.chat.id
    district = message.text
    if district == "–õ—é–±–æ–π —Ä–∞–π–æ–Ω":
        district = None
    facilities = get_sports_facilities(district, sport_type)
    if facilities:
        response_text = "–í–æ—Ç —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n\n"
        for facility in facilities:
            response_text += format_facility_info(facility)
        bot.send_message(chat_id, response_text, parse_mode="Markdown", reply_markup=get_main_menu())
    else:
        bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_main_menu())


@bot.message_handler(commands=['sport'])
def sport(message):
    chat_id = message.chat.id
    user_answers[chat_id] = []
    set_user_state(chat_id, 'sport_question', command='sport')
    bot.send_message(chat_id,
                     "–û—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —è –ø–æ–¥–æ–±—Ä–∞–ª –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞.")
    ask_question(chat_id, 0)


@bot.message_handler(commands=['gender'])
def k(message):
    chat_id = message.chat.id
    set_user_state(chat_id, 'waiting_for_gender', command='k')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π")
    bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=markup)


def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ù–∞–π—Ç–∏ —Å–ø–æ—Ä—Ç–∑–∞–ª", "–ü–æ–¥–æ–±—Ä–∞—Ç—å –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞", "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£")
    return markup


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == 'waiting_for_gender')
def gender_step(message):
    chat_id = message.chat.id
    gender = message.text.lower()
    if gender not in ("–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª: –º—É–∂—Å–∫–æ–π –∏–ª–∏ –∂–µ–Ω—Å–∫–∏–π.")
        return
    user_data.setdefault(chat_id, {})['gender'] = gender
    set_user_state(chat_id, 'waiting_for_age', command=get_user_command(chat_id))
    bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):", reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == 'waiting_for_age')
def age_step(message):
    chat_id = message.chat.id
    try:
        age = int(message.text)
        if age <= 0 or age > 120:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 1 –¥–æ 120):")
            return
        user_data[chat_id]['age'] = age
        set_user_state(chat_id, 'waiting_for_height', command=get_user_command(chat_id))
        bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == 'waiting_for_height')
def height_step(message):
    chat_id = message.chat.id
    try:
        height = int(message.text)
        if height <= 50 or height > 250:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 50 –¥–æ 250 —Å–º):")
            return
        user_data[chat_id]['height'] = height
        set_user_state(chat_id, 'waiting_for_weight', command=get_user_command(chat_id))
        bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:")
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º.")


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == 'waiting_for_weight')
def weight_step(message):
    chat_id = message.chat.id
    try:
        weight = float(message.text)
        if weight <= 20 or weight > 300:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 20 –¥–æ 300 –∫–≥):")
            return
        user_data[chat_id]['weight'] = weight
        ask_activity_level(chat_id)
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º.")


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == 'waiting_for_activity')
def activity_step(message):
    chat_id = message.chat.id
    activity_level = message.text.lower()
    if activity_level not in activity_factors:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    user_data[chat_id]['activity_level'] = activity_level
    ask_goal(chat_id)


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == 'waiting_for_goal')
def goal_step(message):
    chat_id = message.chat.id
    goal = message.text.lower()
    if goal not in ("–ø–æ—Ö—É–¥–µ–Ω–∏–µ", "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã", "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã"):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    user_data[chat_id]['goal'] = goal

    calories_data = calculate_calories(
        gender=user_data[chat_id]['gender'],
        weight=user_data[chat_id]['weight'],
        height=user_data[chat_id]['height'],
        age=user_data[chat_id]['age'],
        activity_level=user_data[chat_id]['activity_level'],
        goal=user_data[chat_id]['goal']
    )

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("""
    UPDATE user_data SET 
        gender=?, 
        age=?, 
        height=?, 
        weight=?, 
        activity_level=?, 
        goal=?
    WHERE chat_id=?
    """, (user_data[chat_id]['gender'],
          user_data[chat_id]['age'],
          user_data[chat_id]['height'],
          user_data[chat_id]['weight'],
          user_data[chat_id]['activity_level'],
          user_data[chat_id]['goal'],
          chat_id))
    conn.commit()
    conn.close()

    response_text = f"–í–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ö–ë–ñ–£:\n"
    response_text += f"–ö–∞–ª–æ—Ä–∏–∏: {calories_data['–∫–∞–ª–æ—Ä–∏–∏']}\n"
    response_text += f"–ë–µ–ª–∫–∏: {calories_data['–±–µ–ª–∫–∏']} –≥\n"
    response_text += f"–ñ–∏—Ä—ã: {calories_data['–∂–∏—Ä—ã']} –≥\n"
    response_text += f"–£–≥–ª–µ–≤–æ–¥—ã: {calories_data['—É–≥–ª–µ–≤–æ–¥—ã']} –≥"

    bot.send_message(chat_id, response_text, reply_markup=get_main_menu())
    clear_user_data(chat_id)


@bot.message_handler(func=lambda message: message.text in ["–ü–æ–¥–æ–±—Ä–∞—Ç—å –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞", "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£",
                                                           "–ù–∞–π—Ç–∏ —Å–ø–æ—Ä—Ç–∑–∞–ª"])
def main_menu_handler(message):
    chat_id = message.chat.id
    choice = message.text

    if choice == "–ü–æ–¥–æ–±—Ä–∞—Ç—å –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞":
        sport(message)
    elif choice == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£":
        k(message)
    elif choice == "–ù–∞–π—Ç–∏ —Å–ø–æ—Ä—Ç–∑–∞–ª":
        gym_command(message)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    state = get_user_state(chat_id)
    command = get_user_command(chat_id)

    if state == 'sport_question':
        user_answers.setdefault(chat_id, []).append(message.text)
        question_index = len(user_answers[chat_id])

        if question_index < len(questions):
            ask_question(chat_id, question_index)
        else:
            feature_vector = process_answers(user_answers[chat_id])
            predicted_sport = predict_sport(feature_vector)
            organizations = get_organizations_info(predicted_sport)

            if organizations:
                response_text = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∞–º –∑–∞–Ω–∏–º–∞—Ç—å—Å—è: {predicted_sport} üéâ\n\n–í–æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞–º –ø–æ–¥–æ–π—Ç–∏:\n\n"
                for org in organizations:
                    response_text += f"üè¢ *{org[0]}*\n"
                    response_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {org[1]}\n"
                    response_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {org[2] if org[2] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    response_text += f"üìç –ê–¥—Ä–µ—Å: {org[3]}\n\n"
            else:
                response_text = f"–Ø —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∞–º {predicted_sport}, –Ω–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞."

            bot.send_message(chat_id, response_text, parse_mode="Markdown", reply_markup=get_main_menu())

            del user_answers[chat_id]
            clear_user_data(chat_id)
            user_data.pop(chat_id, None)
    elif command == 'k':
        if state in (
                'waiting_for_gender', 'waiting_for_age', 'waiting_for_height', 'waiting_for_weight',
                'waiting_for_activity',
                'waiting_for_goal'):
            if state == 'waiting_for_gender':
                gender_step(message)
            elif state == 'waiting_for_age':
                age_step(message)
            elif state == 'waiting_for_height':
                height_step(message)
            elif state == 'waiting_for_weight':
                weight_step(message)
            elif state == 'waiting_for_activity':
                activity_step(message)
            elif state == 'waiting_for_goal':
                goal_step(message)
    elif message.text == "–ù–∞–π—Ç–∏ —Å–ø–æ—Ä—Ç–∑–∞–ª":
        gym_command(message)
    elif message.text == "–ü–æ–¥–æ–±—Ä–∞—Ç—å –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞":
        sport(message)
    elif message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£":
        k(message)
    else:
        bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /start, /k –∏–ª–∏ /sport")


def send_reminder():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='user_data';")
    table_exists = cursor.fetchone()

    if table_exists:
        cursor.execute("SELECT DISTINCT chat_id FROM user_data")
        users = cursor.fetchall()
        for user in users:
            chat_id = user[0]
            reminder = random.choice(reminders)
            try:
                bot.send_message(chat_id, reminder)
                print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –≤ {datetime.datetime.now()}")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
    else:
        print("–¢–∞–±–ª–∏—Ü–∞ user_data –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")

    conn.close()


def setup_schedule():
    sched.every().day.at("09:51").do(send_reminder)


def run_scheduler():
    while True:
        sched.run_pending()
        time.sleep(1)


def create_tables():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute('''
            CREATE TABLE IF NOT EXISTS organizations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                organization TEXT NOT NULL,
                sport_type TEXT NOT NULL,
                district TEXT,
                address TEXT,
                phone TEXT,
                website TEXT,
                description TEXT
            )
            ''')

    cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_data (
                chat_id INTEGER PRIMARY KEY,
                gender TEXT,
                age INTEGER,
                height INTEGER,
                weight REAL,
                activity_level TEXT,
                goal TEXT
            )
            ''')
    conn.commit()
    conn.close()


if __name__ == "__main__":
    create_tables()
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    print("Checking for 'district' column...")
    cursor.execute("PRAGMA table_info(organizations)")
    columns = [column[1] for column in cursor.fetchall()]
    print(f"Columns found: {columns}")
    if 'district' not in columns:
        print("'district' column not found. Adding it...")
        cursor.execute("ALTER TABLE organizations ADD COLUMN district TEXT")
    else:
        print("'district' column found.")
    conn.commit()
    conn.close()

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    print("Checking for 'description' column...")
    cursor.execute("PRAGMA table_info(organizations)")
    columns = [column[1] for column in cursor.fetchall()]
    print(f"Columns found: {columns}")
    if 'description' not in columns:
        print("'description' column not found. Adding it...")
        cursor.execute("ALTER TABLE organizations ADD COLUMN description TEXT")
    else:
        print("'description' column found.")
    conn.commit()
    conn.close()

    threading.Thread(target=setup_schedule).start()
    threading.Thread(target=run_scheduler, daemon=True).start()

    bot.infinity_polling()
